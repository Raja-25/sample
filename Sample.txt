jiGiven that you are using Angular 15 and do not want to use Bootstrap's built-in toast, you can use a separate package for toast notifications. One popular package for Angular is ngx-toastr. Here are the steps to set it up:Install ngx-toastr and @angular/animations:Since you already have @angular/animations installed, you only need to install ngx-toastr.npm install ngx-toastrImport BrowserAnimationsModule and ToastrModule in your AppModule:import { BrowserAnimationsModule } from '@angular/platform-browser/animations';
import { ToastrModule } from 'ngx-toastr';

@NgModule({
  declarations: [
    // your components
  ],
  imports: [
    BrowserAnimationsModule, // required animations module
    ToastrModule.forRoot() // ToastrModule added
  ],
  providers: [],
  bootstrap: [AppComponent]
})
export class AppModule { }Create a Toast Service:ng generate service toastImplement the service:import { Injectable } from '@angular/core';
import { ToastrService } from 'ngx-toastr';

@Injectable({
  providedIn: 'root'
})
export class ToastService {

  constructor(private toastr: ToastrService) { }

  showSuccess(message: string, title: string) {
    this.toastr.success(message, title);
  }

  showError(message: string, title: string) {
    this.toastr.error(message, title);
  }

  showInfo(message: string, title: string) {
    this.toastr.info(message, title);
  }

  showWarning(message: string, title: string) {
    this.toastr.warning(message, title);
  }
}Use the Toast Service in Your Component:Inject the ToastService into the component where you want to trigger the toast notification:import { Component } from '@angular/core';
import { ToastService } from '../toast.service';

@Component({
  selector: 'app-your-component',
  templateUrl: './your-component.component.html',
  styleUrls: ['./your-component.component.css']
})
export class YourComponent {

  constructor(private toastService: ToastService) { }

  showSuccessToast() {
    this.toastService.showSuccess('This is a success message!', 'Success');
  }

  showErrorToast() {
    this.toastService.showError('This is an error message!', 'Error');
  }

  showInfoToast() {
    this.toastService.showInfo('This is an info message!', 'Info');
  }

  showWarningToast() {
    this.toastService.showWarning('This is a warning message!', 'Warning');
  }
}Call the respective toast methods from your template:<button (click)="showSuccessToast()">Show Success Toast</button>
<button (click)="showErrorToast()">Show Error Toast</button>
<button (click)="showInfoToast()">Show Info Toast</button>
<button (click)="showWarningToast()">Show Warning Toast</button>This setup will allow you to use ngx-toastr for toast notifications in your Angular application. The ngx-toastr library provides a comprehensive and flexible way to display toast messages and works well with Angular's versions

_------------
<div class="container mt-5">
  <div class="row justify-content-center">
    <div class="col-md-6">
      <div class="card">
        <div class="card-header">
          <h4>Input and Dropdown Form</h4>
        </div>
        <div class="card-body">
          <form (ngSubmit)="onSubmit()">
            <div class="form-group mb-3">
              <label for="textInput">Input Field</label>
              <input type="text" class="form-control" id="textInput" [(ngModel)]="inputText" name="textInput" placeholder="Enter some text">
            </div>
            <div class="form-group mb-3">
              <label for="selectInput">Dropdown</label>
              <select class="form-control" id="selectInput" [(ngModel)]="selectedOption" name="selectInput">
                <option value="option1">Option 1</option>
                <option value="option2">Option 2</option>
                <option value="option3">Option 3</option>
              </select>
            </div>
            <button type="submit" class="btn btn-primary">Submit</button>
          </form>
        </div>
      </div>
    </div>
  </div>
</div>
_---------------
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <link href="https://maxcdn.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css" rel="stylesheet">
  <style>
    .custom-container {
      background-color: #4b0082;
      color: white;
      padding: 50px;
      border-radius: 10px;
      text-align: center;
    }
    .custom-input {
      width: 50%;
      margin: 0 auto;
    }
  </style>
  <title>Bootstrap Conversion</title>
</head>
<body>
  <div class="container mt-5">
    <div class="custom-container">
      <img src="../../assets/illustration.png" alt="illustration" class="img-fluid mb-4" style="width: 150px;" />
      <h1>Unified Appcode Automation</h1>
      <p>Better way to onboard the applications</p>
      <input
        type="text"
        class="form-control custom-input"
        id="field2"
        name="field2"
        placeholder="ITSI"
      />
    </div>
  </div>
  <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>
  <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>
</body>
</html>
----------
<div *ngIf="found" class="card">
  <div *ngIf="dep" class="card-body">
    <div class="alert alert-info">
      <h1 class="card-title">Important:</h1>
      <p class="card-text">
        Appcode {{ appcode }}' contains some dependencies, to delete this appcode you have to resolve those dependencies.
      </p>
      <h3 class="card-subtitle mb-2 text-muted">Dependencies:</h3>
      <p class="card-text">jobs, calendars, global Variable</p>
    </div>
  </div>
  <div *ngIf="Idep" class="card-body canbedel">
    The Appcode does not have any dependencies it can be deleted.
  </div>
</div>
-----------
<div *ngIf="found && dep" class="position-relative" (mouseenter)="showPopover=true" (mouseleave)="showPopover=false">
  <button class="btn btn-danger" disabled>Delete</button>
  <ng-container *ngIf="showPopover">
    <div class="popover fade bs-popover-top show" role="tooltip" style="top: -40px; left: 50%; transform: translateX(-50%);">
      <div class="arrow" style="left: 50%;"></div>
      <div class="popover-body">It is disabled as you have dependencies</div>
    </div>
  </ng-container>
</div>
_-----------
@Component({
  selector: 'app-date-picker',
  templateUrl: './date-picker.component.html',
  styleUrls: ['./date-picker.component.css']
})
export class DatePickerComponent implements OnInit {
  minDate: string;

  ngOnInit() {
    const today = new Date();
    const dd = String(today.getDate()).padStart(2, '0');
    const mm = String(today.getMonth() + 1).padStart(2, '0'); // January is 0!
    const yyyy = today.getFullYear();

    this.minDate = `${yyyy}-${mm}-${dd}`;
  }
}
----------------------------------------------------------------------
Time difference calculation

import { Component, OnInit } from '@angular/core';

@Component({
  selector: 'app-date-time-form',
  templateUrl: './date-time-form.component.html',
  styleUrls: ['./date-time-form.component.css']
})
export class DateTimeFormComponent implements OnInit {
  startDate: string = "";
  startTime: string = "";
  endDate: string = "";
  endTime: string = "";
  errorMessage: string = "";

  minStartDate: string = "";
  minEndDate: string = "";
  maxEndDate: string = "";
  minEndTime: string = "";
  maxEndTime: string = "";

  ngOnInit() {
    this.setMinStartDate();
  }

  setMinStartDate() {
    const now = new Date();
    const minStartDateTime = new Date(now.getTime() + 24 * 60 * 60 * 1000); // Add 24 hours
    this.minStartDate = this.formatDate(minStartDateTime);
  }

  updateEndDateLimits() {
    if (this.startDate && this.startTime) {
      const startDateTime = new Date(`${this.startDate}T${this.startTime}`);
      const minEndDateTime = new Date(startDateTime.getTime() + 30 * 60000); // Add 30 minutes
      const maxEndDateTime = new Date(startDateTime.getTime() + 24 * 60 * 60000); // Add 24 hours

      this.minEndDate = this.formatDate(minEndDateTime);
      this.maxEndDate = this.formatDate(maxEndDateTime);

      // Reset end date and time
      this.endDate = '';
      this.endTime = '';
      this.errorMessage = '';
    }
  }

  updateEndTimeLimits() {
    if (this.endDate) {
      const startDateTime = new Date(`${this.startDate}T${this.startTime}`);
      const minEndDateTime = new Date(startDateTime.getTime() + 30 * 60000); // Add 30 minutes
      const maxEndDateTime = new Date(startDateTime.getTime() + 24 * 60 * 60000); // Add 24 hours

      if (this.endDate === this.minEndDate) {
        this.minEndTime = this.formatTime(minEndDateTime);
      } else {
        this.minEndTime = '00:00';
      }

      if (this.endDate === this.maxEndDate) {
        this.maxEndTime = this.formatTime(maxEndDateTime);
      } else {
        this.maxEndTime = '23:59';
      }
    }
  }

  formatDate(date: Date): string {
    return date.toISOString().split('T')[0];
  }

  formatTime(date: Date): string {
    return date.toTimeString().split(' ')[0].substring(0, 5);
  }


  validateTimeDifference() {
    if (this.startDate && this.startTime && this.endDate && this.endTime) {
      const start = new Date(`${this.startDate}T${this.startTime}`);
      const end = new Date(`${this.endDate}T${this.endTime}`);
      const diffMs = end.getTime() - start.getTime();
      const diffMins = diffMs / 60000;

      if (diffMins < 30) {
        const minsDifference = Math.round(diffMins);
        this.errorMessage = `The time difference is ${minsDifference} minutes. It should be at least 30 minutes.`;
      } else if (diffMins > 1440) {
        const hrsDifference = Math.floor(diffMins / 60) -24;
        const minsDifference = Math.round(diffMins % 60);
        if (minsDifference === 0) {
          this.errorMessage = `The time difference is ${hrsDifference} hours. It should be at most 24 hours.`;
        } else {
          this.errorMessage = `The time difference is ${hrsDifference} hours and ${minsDifference} minutes. It should be at most 24 hours.`;
        }
      } else {
        this.errorMessage = '';
      }
    }
  }

  onSubmit() {
    this.validateTimeDifference();
    if (!this.errorMessage) {
      console.log('Form Submitted!', {
        startDate: this.startDate,
        startTime: this.startTime,
        endDate: this.endDate,
        endTime: this.endTime
      });
    }
  }
}

<div>
    <label for="startDate">Start Date:</label>
    <input id="startDate" type="date" [(ngModel)]="startDate" (ngModelChange)="updateEndDateLimits()" [min]="minStartDate" required>
  </div>
  <div>
    <label for="startTime">Start Time:</label>
    <input id="startTime" type="time" [(ngModel)]="startTime" (ngModelChange)="updateEndDateLimits()" required>
  </div>
  <div>
    <label for="endDate">End Date:</label>
    <input id="endDate" type="date" [(ngModel)]="endDate" [min]="minEndDate" [max]="maxEndDate" (ngModelChange)="updateEndTimeLimits()" required>
  </div>
  <div>
    <label for="endTime">End Time:</label>
    <input id="endTime" type="time" [(ngModel)]="endTime" [min]="minEndTime" [max]="maxEndTime" required>
  </div>
  <button (click)="onSubmit()">Submit</button>
  <div *ngIf="errorMessage">
    {{ errorMessage }}
  </div>
  
------
import { Component, ElementRef } from '@angular/core';

@Component({
  selector: 'app-your-component',
  templateUrl: './your-component.component.html',
  styleUrls: ['./your-component.component.css']
})
export class YourComponent {
  errorMessage1: string = '';
  errorMessage2: string = '';
  // Define more error messages as needed

  constructor(private elementRef: ElementRef) {}

  onSubmit() {
    // Example validation logic
    if (!this.inputValue1) {
      this.errorMessage1 = 'Please enter a value for input 1.';
      this.scrollToError('errorMessage1Ref');
    } else {
      this.errorMessage1 = '';
    }

    if (!this.inputValue2) {
      this.errorMessage2 = 'Please enter a value for input 2.';
      this.scrollToError('errorMessage2Ref');
    } else {
      this.errorMessage2 = '';
    }

    // Additional validation logic and error messages
  }

  scrollToError(elementRefName: string): void {
    try {
      const errorMessageElement = this.elementRef.nativeElement.querySelector(`#${elementRefName}`);
      if (errorMessageElement) {
        errorMessageElement.scrollIntoView({ behavior: 'smooth', block: 'start', inline: 'nearest' });
      }
    } catch(err) {
      console.error('Error scrolling to error message:', err);
    }
  }
}
------------------------
def parse_xml(xml_string, tag_name):
    root = ET.fromstring(xml_string)
    values = []
    for elem in root.iter(tag_name):
        values.append(ET.tostring(elem, encoding='unicode', method='xml'))
    return values
=----------------
from lxml import etree

def parse_xml(xml_string, tag_name):
    root = etree.fromstring(xml_string)
    values = []
    for elem in root.xpath(f'//{tag_name}'):
        values.append(etree.tostring(elem, pretty_print=True, encoding='unicode'))
    return values
-----------------------------------
from bs4 import BeautifulSoup

def parse_xml(xml_string, tag_name):
    soup = BeautifulSoup(xml_string, 'xml')
    values = [str(tag) for tag in soup.find_all(tag_name)]
    return values
