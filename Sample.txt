To use Bootstrap toasts in an Angular project and implement color schemes based on the type of message, follow these steps:

1. **Install Bootstrap**:
   First, install Bootstrap if you haven't already. You can install it via npm:
   ```bash
   npm install bootstrap
   ```
   Then, include Bootstrap in your `angular.json` file:
   ```json
   "styles": [
     "node_modules/bootstrap/dist/css/bootstrap.min.css",
     "src/styles.css"
   ],
   "scripts": [
     "node_modules/bootstrap/dist/js/bootstrap.bundle.min.js"
   ]
   ```

2. **Create a Toast Service**:
   Create a service to manage toasts.
   ```typescript
   // toast.service.ts
   import { Injectable } from '@angular/core';

   @Injectable({
     providedIn: 'root',
   })
   export class ToastService {
     toasts: any[] = [];

     show(message: string, type: 'success' | 'info' | 'warning' | 'danger' = 'info') {
       this.toasts.push({ message, type });
     }

     remove(toast: any) {
       this.toasts = this.toasts.filter(t => t !== toast);
     }
   }
   ```

3. **Create a Toast Component**:
   Create a component to display toasts.
   ```typescript
   // toast.component.ts
   import { Component } from '@angular/core';
   import { ToastService } from './toast.service';

   @Component({
     selector: 'app-toast',
     template: `
       <div *ngFor="let toast of toastService.toasts" class="toast-container position-fixed bottom-0 end-0 p-3" style="z-index: 1200;">
         <div class="toast" [class.bg-success]="toast.type === 'success'" [class.bg-info]="toast.type === 'info'"
           [class.bg-warning]="toast.type === 'warning'" [class.bg-danger]="toast.type === 'danger'" role="alert" aria-live="assertive" aria-atomic="true">
           <div class="toast-header">
             <strong class="me-auto">{{ toast.type | titlecase }}</strong>
             <button type="button" class="btn-close" (click)="toastService.remove(toast)"></button>
           </div>
           <div class="toast-body">
             {{ toast.message }}
           </div>
         </div>
       </div>
     `,
     styles: []
   })
   export class ToastComponent {
     constructor(public toastService: ToastService) { }
   }
   ```

4. **Add Toast Component to App Module**:
   Ensure the `ToastComponent` is declared and included in the `AppModule`.
   ```typescript
   // app.module.ts
   import { NgModule } from '@angular/core';
   import { BrowserModule } from '@angular/platform-browser';
   import { AppComponent } from './app.component';
   import { ToastComponent } from './toast.component';
   import { ToastService } from './toast.service';

   @NgModule({
     declarations: [
       AppComponent,
       ToastComponent
     ],
     imports: [
       BrowserModule
     ],
     providers: [ToastService],
     bootstrap: [AppComponent]
   })
   export class AppModule { }
   ```

5. **Use Toasts in Your Application**:
   Inject the `ToastService` and use it to show toasts based on messages and types.
   ```typescript
   // app.component.ts
   import { Component } from '@angular/core';
   import { ToastService } from './toast.service';

   @Component({
     selector: 'app-root',
     template: `
       <div class="container mt-5">
         <button (click)="showToast('This is a success message!', 'success')" class="btn btn-success">Show Success Toast</button>
         <button (click)="showToast('This is an info message!', 'info')" class="btn btn-info">Show Info Toast</button>
         <button (click)="showToast('This is a warning message!', 'warning')" class="btn btn-warning">Show Warning Toast</button>
         <button (click)="showToast('This is a danger message!', 'danger')" class="btn btn-danger">Show Danger Toast</button>
       </div>
       <app-toast></app-toast>
     `,
     styles: []
   })
   export class AppComponent {
     constructor(private toastService: ToastService) { }

     showToast(message: string, type: 'success' | 'info' | 'warning' | 'danger') {
       this.toastService.show(message, type);
     }
   }
   ```

With this setup, you can now display Bootstrap toasts with different color schemes based on the message type in your Angular application.
